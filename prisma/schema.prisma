// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int       @id @default(autoincrement())
  email           String    @unique
  name      String    
  lastname  String
  password  String 
  expenses        Expense[]
  expenses_types  ExpenseType[]
  incomes         Income[]
  incomes_types   IncomeType[]
  accounts        Account[]
  @@map("users")     
}

model Expense{
  id              Int       @id @default(autoincrement())
  description     String
  value           Float
  typeId          Int
  type            ExpenseType? @relation(fields: [typeId], references: [id])  
  status          Boolean
  date            DateTime
  observation     String?
  userId          Int?
  user            User?     @relation(fields: [userId], references: [id])
  
  @@map("expenses")
}

model Income{
  id              Int       @id @default(autoincrement())
  description     String
  value           Float
  typeId          Int
  type            IncomeType? @relation(fields: [typeId], references: [id])
  status          Boolean
  date            DateTime
  observation     String?
  userId          Int?
  user            User?     @relation(fields: [userId], references: [id])
  
  @@map("incomes")
}

model ExpenseType{
  id              Int       @id @default(autoincrement())
  name            String
  isGlobal        Boolean   @default(false)
  userId          Int?
  user            User?     @relation(fields: [userId], references: [id])
  expense         Expense[]
  @@unique([name, userId])
  @@map("expense_types")
}

model IncomeType{
  id              Int       @id @default(autoincrement())
  name            String
  isGlobal        Boolean   @default(false)
  userId          Int?
  user            User?     @relation(fields: [userId], references: [id])
  income          Income[]
  @@unique([name, userId])
  @@map("income_types")
}

model Account{
  id              Int       @id @default(autoincrement())
  name            String
  isGlobal        Boolean   @default(false)
  userId          Int?
  user            User?     @relation(fields: [userId], references: [id])
  @@map("accounts")
}